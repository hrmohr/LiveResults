package dk.cubing.liveresults.standalone {		import flash.display.MovieClip;    import flash.net.*;	import flash.events.*;	import flash.text.*;	import com.adobe.serialization.json.JSON;    public class Scoreboard extends MovieClip {						var server:String;		var currentPage:int = 1;		        public function Scoreboard() {			            var loader:URLLoader = new URLLoader();            loader.addEventListener(Event.COMPLETE, loadConfig);            var request:URLRequest = new URLRequest("config.xml");            try {                loader.load(request);            } catch (error:Error) {                trace("Unable to load config.xml");            }        }				private function loadConfig(e:Event):void {			var xmlData:XML = new XML();			xmlData = new XML(e.target.data);			parseConfig(xmlData);		}				private function parseConfig(xmlData:XML):void {			this.server = xmlData.server;			line1.text = xmlData.line1;			line2.text = xmlData.line2;			line3.text = xmlData.line3;			line4.text = xmlData.line4;			line5.text = xmlData.line5;						// load initial results			loadResults();		}				public function loadResults():void {			if (this.server != null) {				var loader:URLLoader = new URLLoader();				loader.addEventListener(Event.COMPLETE, parseResults);					var request:URLRequest = new URLRequest(this.server + "&page=" + this.currentPage);				try {					loader.load(request);				} catch (error:Error) {					trace("Unable to load results from: " + this.server);				}			}		}				private function zeroPad(n:String, digits:int):String {			while (n.length < digits) {				n = '0' + n;			}			return n;		}				private function formatDecimal(num:Number):String {			var numStr:String = num.toString();			return numStr.substr(0, numStr.length-2) + "." + numStr.substr(numStr.length-2);			}				private function formatRank(i:int):String {			return i+1+((this.currentPage-1)*12);		}				private function formatName(rank:int, firstname:String, surname:String):String {			return formatRank(rank) + ". "+ firstname.substr(0, 1) + ". " + surname;		}				private function formatSeconds(result:int):String {			if (result == -1) return "DNF";			if (result == -2) return "DNS";			return formatDecimal(result);		}				private function formatMinutes(result:int):String {			if (result == -1) return "DNF";			if (result == -2) return "DNS";			var millis:String = result.toString().substring(result.toString().length-2);			result = result.toString().substring(0, result.toString().length-2);			var minutes:int = Math.floor(result / 60);			var seconds:int = result - (minutes * 60);			if (minutes > 0) {				return minutes.toString() + ':' + zeroPad(seconds.toString(),2) + '.' + millis;			} else {				return seconds.toString() + '.' + millis;			}		}				private function formatNumbers(result:int):String {			if (result == -1) return "DNF";			if (result == -2) return "DNS";			return result.toString();		}				private function formatMultiBLD(result:int):String {			if (result == -1) return "DNF";			if (result == -2) return "DNS";			var failed:int = Number(result.toString().substr(-2));			var time:int = Number(result.toString().substring(2, 7));			var solved:int = 99 - Number(result.toString().substring(0, 2)) + failed;			var tried:int = solved + failed;			var minutes:int = Math.floor(time / 60);			var seconds:int = time - (minutes * 60);			var timeStr:String;			if (minutes > 0) {				if (minutes == 60) {					timeStr = '1:00:00';				} else {					timeStr = minutes + ':' + zeroPad(seconds, 2);				}			} else {				timeStr = seconds.toString();			}			return solved + '/' + tried + ' ' + timeStr;		}				private function parseResults(e:Event):void {			var resultsRoot:Object = JSON.decode(e.target.data);						// page			page.text = this.currentPage + " of " + resultsRoot.pages;						// event			event.text = resultsRoot.event.name;						// format			var formatStr:String;			var resultCol:String;			var formatFunc:Function;			switch (resultsRoot.event.format) {			case 'a':				formatStr = "average of 5";				resultCol = "G";				this[resultCol + "1"].text = "avg";				this["B1"].text = "1";				this["C1"].text = "2";				this["D1"].text = "3";				this["E1"].text = "4";				this["F1"].text = "5";				break;			case 'm':				formatStr = "mean of 3";				resultCol = "E";				this[resultCol + "1"].text = "mean";				this["B1"].text = "1";				this["C1"].text = "2";				this["D1"].text = "3";				break;			case '1':				formatStr = "best of " + resultsRoot.event.format;				resultCol = "B";				this["B1"].text = "best";				break;			case '2':				formatStr = "best of " + resultsRoot.event.format;				resultCol = "D";				this[resultCol + "1"].text = "best";				this["B1"].text = "1";				this["C1"].text = "2";				break;			case '3':				formatStr = "best of " + resultsRoot.event.format;				resultCol = "E";				this[resultCol + "1"].text = "best";				this["B1"].text = "1";				this["C1"].text = "2";				this["D1"].text = "3";				break;			}			format.text = formatStr;			switch (resultsRoot.event.timeFormat) {			case 's':				formatFunc = formatSeconds;				break;			case 'm':				formatFunc = formatMinutes;				break;			case 'n':				formatFunc = formatNumbers;				break;			case 'b':				formatFunc = formatMultiBLD;				break;			}						// results			var results:Array = resultsRoot.results;			for (var i:int=0; i<12; i++) {				if (results[i]) {					this["A" + (i+2)].text = formatName(i, results[i].firstname, results[i].surname);									// results					if (results[i].result1 != 0) {						var temp:String = formatFunc(results[i].result1);						var format:TextFormat = this["B" + (i+2)].getTextFormat();						if (temp.length > 8) {							format.size = 14; // for mbf results						} else {							format.size = 20;						}						this["B" + (i+2)].defaultTextFormat = format;						this["B" + (i+2)].text = temp;					} else {						this["B" + (i+2)].text = "";					}					if (results[i].result2 != 0) {						this["C" + (i+2)].text = formatFunc(results[i].result2);					} else {						this["C" + (i+2)].text = "";					}					if (results[i].result3 != 0) {						this["D" + (i+2)].text = formatFunc(results[i].result3);					} else {						this["D" + (i+2)].text = "";					}					if (results[i].result4 != 0) {						this["E" + (i+2)].text = formatFunc(results[i].result4);					} else {						this["E" + (i+2)].text = "";					}					if (results[i].result5 != 0) {						this["F" + (i+2)].text = formatFunc(results[i].result5);					} else {						this["F" + (i+2)].text = "";					}										// final result					if (resultsRoot.event.format == 'a' || resultsRoot.event.format == 'm') {						if (results[i].average != 0) {							this[resultCol + (i+2)].text = formatFunc(results[i].average);						} else {							this[resultCol + (i+2)].text = "";						}					} else {						if (results[i].best != 0) {							this[resultCol + (i+2)].text = formatFunc(results[i].best);						} else {							this[resultCol + (i+2)].text = "";						}					}				// reset				} else {					this["A" + (i+2)].text = "";					this["B" + (i+2)].text = "";					this["C" + (i+2)].text = "";					this["D" + (i+2)].text = "";					this["E" + (i+2)].text = "";					this["F" + (i+2)].text = "";					this["G" + (i+2)].text = "";				}			}						// handle pagination			this.currentPage++;			if (this.currentPage > resultsRoot.pages) {				this.currentPage = 1;			}		}    }}